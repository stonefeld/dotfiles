env:
  TERM: xterm-256color

window:
  energy: Performance
  padding:
    x: 4
    y: 5

  dynamic_padding: true
  decorations: full
  startup_mode: Windowed

  title: terminal
  class:
    instance: Alacritty
    general: Alacritty

  gtk_theme_variant: None

scrolling:
  history: 5000
  multiplier: 1

font:
  normal:
    #family: Fantasque Sans Mono Nerd Font
    family: Ubuntu Mono Nerd Font
    style: Regular

  bold:
    #family: Fantasque Sans Mono Nerd Font
    family: Ubuntu Mono Nerd Font
    style: Bold

  italic:
    #family: Fantasque Sans Mono Nerd Font
    family: Ubuntu Mono Nerd Font
    style: Italic

  bold_italic:
    #family: Fantasque Sans Mono Nerd Font
    family: Ubuntu Mono Nerd Font
    style: Bold Italic

  size: 12.0
  offset:
    x: 1
    y: 2

  glyph_offset:
    x: 1
    y: 1

draw_bold_text_with_bright_colors: false
background_opacity: 0.85

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  save_to_clipboard: false

window.dynamic_title: true

cursor:
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block
  unfocused_hollow: true
  thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

shell:
  program: /usr/bin/fish
  args:
    - --login

working_directory: None
alt_send_esc: true

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: true

  url:
    launcher:
      program: xdg-open
      args: []

    modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#   - SearchBackward
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#   - SearchNext
#   - SearchPrevious
#   - SearchStart
#   - SearchEnd
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  - { key: Paste,                                action: Paste            }
  - { key: Copy,                                 action: Copy             }
  - { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,    }
  - { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown   }
  - { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,     }
  - { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom   }
  - { key: V,         mods: Control|Shift,       action: Paste            }
  - { key: C,         mods: Control|Shift,       action: Copy             }
  - { key: F,         mods: Control|Shift,       action: SearchForward    }
  - { key: B,         mods: Control|Shift,       action: SearchBackward   }
  - { key: Insert,    mods: Shift,               action: PasteSelection   }
  - { key: Key0,      mods: Control,             action: ResetFontSize    }
  - { key: Equals,    mods: Control,             action: IncreaseFontSize }
  - { key: Minus,     mods: Control,             action: DecreaseFontSize }
  - { key: Return,    mods: Control|Shift,       action: SpawnNewInstance }

debug:
  render_timer: false
  persistent_logging: false

  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn
  print_events: false

colors:
  cursor:
    text:           '#2e3440'
    cursor:         '#d8dee9'
  
  selection:
    text:           CellForeground
    background:     '#4c566a'

  search:
    matches:
      foreground:   CellBackground
      background:   '#88c0d0'

    bar:
      background:   '#434c5e'
      foreground:   '#d8dee9'

  # Colors (Nord)
  #primary:
  #  background:     '#2e3440'
  #  foreground:     '#d8dee9'

  #normal:
  #  black:          '#3b4252'
  #  red:            '#bf616a'
  #  green:          '#a3be8c'
  #  yellow:         '#ebcb8b'
  #  blue:           '#81a1c1'
  #  magenta:        '#b48ead'
  #  cyan:           '#88c0d0'
  #  white:          '#e5e9f0'
  #
  #bright:
  #  black:          '#4c566a'
  #  red:            '#bf616a'
  #  green:          '#a3be8c'
  #  yellow:         '#ebcb8b'
  #  blue:           '#81a1c1'
  #  magenta:        '#b48ead'
  #  cyan:           '#8fbcbb'
  #  white:          '#eceff4'

  # Colors (Gruvbox dark)
  #primary:
  #  background: '#282828'
  #  foreground: '#ebdbb2'
  #
  #normal:
  #  black:   '#282828'
  #  red:     '#cc241d'
  #  green:   '#98971a'
  #  yellow:  '#d79921'
  #  blue:    '#458588'
  #  magenta: '#b16286'
  #  cyan:    '#689d6a'
  #  white:   '#a89984'
  #
  #bright:
  #  black:   '#928374'
  #  red:     '#fb4934'
  #  green:   '#b8bb26'
  #  yellow:  '#fabd2f'
  #  blue:    '#83a598'
  #  magenta: '#d3869b'
  #  cyan:    '#8ec07c'
  #  white:   '#ebdbb2'
    
  # Colors (OneDark)
  #primary:
  #  background: '#282c34'
  #  foreground: '#abb2bf'

  #normal:
  #  black:      '#5c6370'
  #  red:        '#e06c75'
  #  green:      '#98c379'
  #  yellow:     '#e5c07b'
  #  blue:       '#61afef'
  #  magenta:    '#c678dd'
  #  cyan:       '#56b6c2'
  #  white:      '#828997'

  #bright:
  #  black:        '#696c77'
  #  red:          '#e45649'
  #  green:        '#50a14f'
  #  yellow:       '#c18401'
  #  blue:         '#4078f2'
  #  magenta:      '#a626a4'
  #  cyan:         '#0184bc'
  #  white:        '#a0a1a7'

  # Colors (Monokai)
  primary:
    background: '#2D2A2E'
    foreground: '#FCFCFA'
  
  normal:
    black:   '#403E41'
    red:     '#FF6188'
    green:   '#A9DC76'
    yellow:  '#FFD866'
    blue:    '#78DCE8'
    magenta: '#AB9DF2'
    cyan:    '#FC9867'
    white:   '#FCFCFA'
  
  bright:
    black:   '#727072'
    red:     '#FF6188'
    green:   '#A9DC76'
    yellow:  '#FFD866'
    blue:    '#78DCE8'
    magenta: '#AB9DF2'
    cyan:    '#FC9867'
    white:   '#FCFCFA'

WINiT_X11_SCALE_FACTOR: 1
