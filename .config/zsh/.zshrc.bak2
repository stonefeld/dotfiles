#            _
#    _______| |__  _ __ ___
#   |_  / __| '_ \| '__/ __|
#  _ / /\__ \ | | | | | (__
# (_)___|___/_| |_|_|  \___|

#########################
#### PROMPT AND INIT ####
#########################
# Set global and buffer history
HISTSIZE=1000
SAVEHIST=10000

# Set emacs-like keybindings
bindkey -e

# Command completion
autoload -Uz compinit
compinit
zstyle ':completion:*' menu select

# Automatically update the prompt
setopt prompt_subst

# Use starship as prompt
if command -v starship &>/dev/null; then
    eval "$(starship init zsh)"
else
    pathshorten() { pwd | sed -e "s|$HOME|~|" | sed -re 's|([^./])[^/]+/|\1/|g'; }
    export PROMPT='%B%F{red}[%f%F{yellow}%n%f%F{green}@%f%F{blue}%m%f %F{magenta}$(pathshorten)%f%F{red}]%f%b%F{white}$ '
fi

#################
#### ALIASES ####
#################
# Prettier ls
if command -v exa &>/dev/null; then
    alias ls='exa -g --color=always --group-directories-first'
    alias ll='exa -la -g --color=always --group-directories-first'
    alias la='exa -a -g --color=always --group-directories-first'
else
    alias ls='LC_COLLATE=C ls -hp --color=always --group-directories-first'
    alias ll='LC_COLLATE=C ls -lahp --color=always --group-directories-first'
    alias la='LC_COLLATE=C ls -ahp --color=always --group-directories-first'
fi
[[ -z "$TERMFM" ]] || alias lf='$TERMFM .'

# Force confirmation
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# Working with git
alias g='git'
alias gf='git flow'
alias lg='lazygit'
alias dotfiles='/usr/bin/git --git-dir=$HOME/.local/share/dotfiles --work-tree=$HOME'

# Python shortcuts
alias py='python3'
alias pe='pipenv'

# Colors
alias ip='ip -color=auto'
alias diff='dmesg --color=always'
alias grep='grep --color=auto'

# System shortcuts
alias sys='systemctl'
alias jou='journalctl'
alias bth='bluetoothctl'
alias pm='pulsemixer'
alias am='alsamixer'

# List and connect quicker to wifi with NetworkManager
alias wls='nmcli device wifi list'
alias wlsr='nmcli device wifi list --rescan yes'
alias wcon='nmcli device wifi connect'

# Get aliases with sudo/doas
command -v sudo &>/dev/null && alias sudo='sudo '
command -v doas &>/dev/null && alias doas='doas '

# Easy manage packages with fzf
if command -v fzf &>/dev/null; then
    if command -v pacman &>/dev/null; then
        alias pacinstall='pacman -Slq | fzf --height 0% --multi --preview "pacman -Si {1}" | xargs -ro sudo pacman -S'
        alias pacremove='pacman -Qq | fzf --height 0% --multi --preview "pacman -Qi {1}" | xargs -ro sudo pacman -Rns'
    fi

    command -v paru &>/dev/null && alias parinstall='paru -Slq | fzf --height 0% --multi --preview "paru -Si {1}" | xargs -ro paru -S --noconfirm'
    command -v yay &>/dev/null && alias yayinstall='yay -Slq | fzf --height 0% --multi --preview "yay -Si {1}" | xargs -ro yay -S'
fi

# Upgrade packages quicker
alias pacupdate="sudo pacman -Syu --noconfirm && setsid -f pacupdatecheck"
alias yayupdate="yay -Sua --noconfirm && setsid -f pacupdatecheck"
alias parupdate="paru -Sua --noconfirm && setsid -f pacupdatecheck"

##############
#### KEYS ####
##############
# Create a zkbd compatible hash;
# To add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# Setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
    autoload -Uz add-zle-hook-widget
    function zle_application_mode_start { echoti smkx }
    function zle_application_mode_stop { echoti rmkx }
    add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
    add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Use Alt+f to quickly switch between directories
move-cd() {
    cd "$(find ~ -type d \( -name "\.*" -o -name "node_modules" \) -prune -o -type d -print | fzf)"
    zle .reset-prompt
}
zle -N move-cd
bindkey -- '^[f' move-cd

#################
#### PLUGINS ####
#################
# Check if plugin exists and clone it if it doesn't
check_plugin() {
    if [[ ! -d "$1" ]] && command -v git &>/dev/null; then
        git clone "$3" "$1"
    fi
    [[ -f "$1/$2" ]] && source "$1/$2"
}

# Define plugins
zplugins="${ZDOTDIR:-$HOME}"/.zplugins
zsh_highlighting="$zplugins"/zsh_highlighting
zsh_autosuggestions="$zplugins"/zsh_autosuggestions
zsh_gitflow="$zplugins"/zsh_gitflow

# Check for plugins
check_plugin "$zsh_highlighting" zsh-syntax-highlighting.zsh https://github.com/zsh-users/zsh-syntax-highlighting
check_plugin "$zsh_autosuggestions" zsh-autosuggestions.zsh https://github.com/zsh-users/zsh-autosuggestions
check_plugin "$zsh_gitflow" git-flow-completion.zsh https://github.com/bobthecow/git-flow-completion

##########################
#### TITLE AND EXTRAS ####
##########################
set_title() { print -Pn -- '\e]2;%n@%m:%~\a' }
precmd_functions+=(set_title)
